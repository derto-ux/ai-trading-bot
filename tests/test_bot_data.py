import logging
import pandas as pd
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - BOT_TEST - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_test.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def test_bot_data_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ"""
    print("ü§ñ –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–¢–û–ö –î–ê–ù–ù–´–• –í –ë–û–¢–ï")
    print("=" * 50)
    
    try:
        from main import TradingBot
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = TradingBot()
        logging.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–≤–æ–π —Ü–µ–Ω—ã
        logging.info("üîç –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–≤–æ–π —Ü–µ–Ω—ã")
        price = bot.get_live_price()
        logging.info(f"üí∞ –ñ–∏–≤–∞—è —Ü–µ–Ω–∞: ${price}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏
        logging.info("üîç –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏")
        klines_data = bot.mexc_client.get_klines('BTCUSDT', '30m', 10)
        logging.info(f"üìä –î–∞–Ω–Ω—ã–µ –æ—Ç –±–∏—Ä–∂–∏: {len(klines_data) if klines_data else 0} –∑–∞–ø–∏—Å–µ–π")
        
        if klines_data:
            logging.info(f"üìà –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {klines_data[0]}")
        
        # –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        logging.info("üîç –¢–ï–°–¢ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        if klines_data:
            formatted_data = bot._format_klines_data(klines_data)
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(formatted_data)} —Å—Ç—Ä–æ–∫")
            logging.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(formatted_data.columns)}")
            logging.info(f"üìä –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:\n{formatted_data.head(3)}")
        else:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
        # –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logging.info("üîç –¢–ï–°–¢ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        test_data = bot._generate_test_data(price)
        logging.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(test_data)} —Å—Ç—Ä–æ–∫")
        logging.info(f"üìä –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:\n{test_data.head(3)}")
        
    except Exception as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê –í –ë–û–¢–ï: {e}")
        import traceback
        logging.error(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í: {traceback.format_exc()}")

def test_analysis_engine():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüß† –¢–ï–°–¢–ò–†–£–ï–ú AI –ê–ù–ê–õ–ò–ó")
    print("=" * 50)
    
    try:
        from ai.analysis_engine import AIAnalysisEngine
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        engine = AIAnalysisEngine()
        logging.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start='2024-01-01', periods=100, freq='h')
        prices = 67500 + np.random.normal(0, 1000, 100).cumsum()
        
        df = pd.DataFrame({
            'open': prices * 0.999,
            'high': prices * 1.002,
            'low': prices * 0.998, 
            'close': prices,
            'volume': np.random.randint(1000, 5000, 100)
        })
        
        logging.info(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        logging.info("üîç –¢–ï–°–¢: AI –∞–Ω–∞–ª–∏–∑")
        recommendation = engine.get_ai_recommendation('BTCUSDT', df)
        logging.info(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {recommendation}")
        
    except Exception as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê –í –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ï: {e}")
        import traceback
        logging.error(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í: {traceback.format_exc()}")

if __name__ == "__main__":
    print("üß™ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò TRADING BOT")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º numpy –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    import numpy as np
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_bot_data_flow()
    test_analysis_engine()
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–ò–°–ê–ù–´ –í –§–ê–ô–õ: bot_test.log")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ!")