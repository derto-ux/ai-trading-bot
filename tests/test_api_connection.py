import requests
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - TEST - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('api_test.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def test_mexc_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC API"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê MEXC API")
    print("=" * 50)
    
    base_url = "https://api.mexc.com"
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC
    logging.info("üîç –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC")
    try:
        response = requests.get(
            f"{base_url}/api/v3/ticker/price",
            params={'symbol': 'BTCUSDT'},
            timeout=10
        )
        
        logging.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logging.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        logging.info(f"üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            data = response.json()
            logging.info(f"‚úÖ –£–°–ü–ï–•: –¶–µ–Ω–∞ BTC = ${data['price']}")
        else:
            logging.error(f"‚ùå –û–®–ò–ë–ö–ê: HTTP {response.status_code}")
            
    except Exception as e:
        logging.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
    
    print("-" * 50)
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logging.info("üîç –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    try:
        response = requests.get(
            f"{base_url}/api/v3/klines",
            params={
                'symbol': 'BTCUSDT',
                'interval': '30m',
                'limit': 5
            },
            timeout=10
        )
        
        logging.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logging.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        logging.info(f"üì¶ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if response.status_code == 200:
            data = response.json()
            logging.info(f"‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π")
            if data:
                latest_candle = data[-1]
                logging.info(f"üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {latest_candle}")
        else:
            logging.error(f"‚ùå –û–®–ò–ë–ö–ê: HTTP {response.status_code}")
            
    except Exception as e:
        logging.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
    
    print("-" * 50)
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    logging.info("üîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
    try:
        response = requests.get(
            f"{base_url}/api/v3/ping",
            timeout=10
        )
        
        logging.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logging.info(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            logging.info("‚úÖ –£–°–ü–ï–•: API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logging.error(f"‚ùå –û–®–ò–ë–ö–ê: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        logging.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
    
    print("=" * 50)
    print("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

def test_mexc_client():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ MexcClient"""
    print("\nüöÄ –¢–ï–°–¢–ò–†–£–ï–ú –ù–ê–® MEXC CLIENT")
    print("=" * 50)
    
    try:
        from api.mexc_client import MexcClient
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
        client = MexcClient(api_key='test_key', secret_key='test_secret')
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        logging.info("üîç –¢–ï–°–¢: client.get_current_price()")
        price = client.get_current_price('BTCUSDT')
        logging.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${price}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π
        logging.info("üîç –¢–ï–°–¢: client.get_klines()")
        klines = client.get_klines('BTCUSDT', '30m', 5)
        logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(klines) if klines else 0}")
        
        if klines and len(klines) > 0:
            logging.info(f"üìà –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞: {klines[0]}")
        
    except Exception as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê –í MEXC CLIENT: {e}")

def test_direct_vs_client():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ —á–µ—Ä–µ–∑ –Ω–∞—à –∫–ª–∏–µ–Ω—Ç"""
    print("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å vs –ù–∞—à –∫–ª–∏–µ–Ω—Ç")
    print("=" * 50)
    
    base_url = "https://api.mexc.com"
    
    try:
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
        logging.info("üì° –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö API")
        direct_response = requests.get(
            f"{base_url}/api/v3/ticker/price",
            params={'symbol': 'BTCUSDT'},
            timeout=10
        )
        
        if direct_response.status_code == 200:
            direct_data = direct_response.json()
            direct_price = float(direct_data['price'])
            logging.info(f"‚úÖ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å: ${direct_price}")
        else:
            logging.error(f"‚ùå –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {direct_response.status_code}")
            return
        
        # –ß–µ—Ä–µ–∑ –Ω–∞—à –∫–ª–∏–µ–Ω—Ç
        logging.info("ü§ñ –ó–ê–ü–†–û–° –ß–ï–†–ï–ó –ù–ê–® CLIENT")
        from api.mexc_client import MexcClient
        client = MexcClient(api_key='test_key', secret_key='test_secret')
        client_price = client.get_current_price('BTCUSDT')
        logging.info(f"‚úÖ –ù–∞—à –∫–ª–∏–µ–Ω—Ç: ${client_price}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        difference = abs(direct_price - client_price)
        logging.info(f"üìä –†–∞–∑–Ω–∏—Ü–∞: ${difference:.4f}")
        
        if difference < 1.0:  # –î–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ $1
            logging.info("üéØ –¶–ï–ù–´ –°–û–í–ü–ê–î–ê–Æ–¢! –ù–∞—à –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logging.warning("‚ö†Ô∏è –¶–ï–ù–´ –†–ê–ó–õ–ò–ß–ê–Æ–¢–°–Ø! –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ")
            
    except Exception as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø: {e}")

if __name__ == "__main__":
    print("üß™ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò MEXC API")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_mexc_api()
    test_mexc_client() 
    test_direct_vs_client()
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–ò–°–ê–ù–´ –í –§–ê–ô–õ: api_test.log")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º!")