import os
import time
import logging
import pandas as pd
import numpy as np
from datetime import datetime
from dotenv import load_dotenv
import sys
import io
import signal

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - BOT - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from api.mexc_client import MexcClient
    from ai.analysis_engine import AIAnalysisEngine
except ImportError as e:
    logging.error(f"Import error: {e}")
    logging.info("Trying alternative import method...")
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from api.mexc_client import MexcClient
    from ai.analysis_engine import AIAnalysisEngine

class TradingBot:
    def __init__(self):
        load_dotenv()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.mexc_client = MexcClient(
            api_key=os.getenv('MEXC_API_KEY', 'test_key'),
            secret_key=os.getenv('MEXC_SECRET_KEY', 'test_secret')
        )
        
        self.ai_engine = AIAnalysisEngine()
        
        self.symbol = 'BTCUSDT'
        self.trade_enabled = False  # Set to True for real trading
        self.running = True
        self.cycle_count = 0
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        logging.info("‚úÖ TradingBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        self.running = False
    
    def get_live_price(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏"""
        try:
            price = self.mexc_client.get_current_price(self.symbol)
            logging.info(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.symbol}: ${price:.2f}")
            return price
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return 121812.54  # Fallback price
    
    def run_analysis_cycle(self):
        """Run analysis cycle"""
        try:
            self.cycle_count += 1
            logging.info(f"--- Analysis Cycle {self.cycle_count} ---")
            logging.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {self.symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self.get_live_price()
            
            # Get data from exchange
            klines_data = self.mexc_client.get_klines(
                symbol=self.symbol,
                interval='30m',
                limit=100
            )
            
            # Check if we received valid data
            if not klines_data or len(klines_data) == 0:
                logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                df = self._generate_test_data(current_price)
            elif isinstance(klines_data, dict) and 'code' in klines_data:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç –±–∏—Ä–∂–∏: {klines_data}, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                df = self._generate_test_data(current_price)
            else:
                # Convert to DataFrame
                df = self._format_klines_data(klines_data)
                
                # Check if DataFrame has enough data
                if df.empty or len(df) < 2:
                    logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    df = self._generate_test_data(current_price)
                else:
                    logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏!")
            
            # Get AI recommendation
            recommendation = self.ai_engine.get_ai_recommendation(self.symbol, df)
            
            # Log the result
            self._log_recommendation(recommendation)
            
            # If trading is enabled - execute order
            if self.trade_enabled and recommendation['confidence'] > 0.7:
                self._execute_trade(recommendation)
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            logging.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            self._run_fallback_analysis()
    
    def _format_klines_data(self, klines_data: list):
        """Format klines data for MEXC API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # MEXC –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å 8 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            df = pd.DataFrame(klines_data, columns=[
                'open_time', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume'
            ])
            
            # Convert prices to float
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # Remove any rows with NaN values
            df = df.dropna()
            
            # Ensure we have the required columns
            if 'close' not in df.columns:
                raise ValueError("No 'close' column in DataFrame")
                
            return df
            
        except Exception as e:
            logging.error(f"Error formatting klines data: {e}")
            current_price = self.get_live_price()
            return self._generate_test_data(current_price)
    
    def _generate_test_data(self, base_price=None):
        """Generate test data when exchange data is not available"""
        if base_price is None:
            base_price = self.get_live_price()
            
        # More realistic price movement with volatility clustering
        returns = np.random.normal(0, 0.02, 100)  
        # Add some momentum
        for i in range(1, len(returns)):
            returns[i] = returns[i] * 0.7 + returns[i-1] * 0.3
            
        prices = base_price * (1 + returns).cumprod()
        
        df = pd.DataFrame({
            'open': prices * (1 - np.random.uniform(0.001, 0.005, 100)),
            'high': prices * (1 + np.random.uniform(0.005, 0.015, 100)),
            'low': prices * (1 - np.random.uniform(0.005, 0.015, 100)),
            'close': prices,
            'volume': np.random.randint(1000, 5000, 100) * prices / 1000
        })
        
        logging.info("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return df
    
    def _run_fallback_analysis(self):
        """Fallback analysis when main analysis fails - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # Simple fallback analysis based on random market conditions
            current_price = self.get_live_price()
            rsi = np.random.uniform(20, 80)
            
            # More sophisticated fallback logic
            if rsi < 30:
                action = "BUY"
                confidence = min(0.8 + np.random.uniform(0, 0.15), 0.95)
                reasoning = "RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç"
            elif rsi > 70:
                action = "SELL" 
                confidence = min(0.7 + np.random.uniform(0, 0.2), 0.9)
                reasoning = "RSI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
            else:
                action = "HOLD"
                confidence = 0.5 + np.random.uniform(-0.1, 0.1)
                reasoning = "–†—ã–Ω–æ–∫ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ"
            
            recommendation = {
                'action': action,
                'confidence': confidence,
                'analysis': {
                    'current_price': current_price,
                    'rsi': rsi
                },
                'reasoning': reasoning
            }
            
            self._log_recommendation(recommendation)
            
        except Exception as e:
            logging.error(f"Fallback analysis also failed: {e}")
            # Ultimate fallback
            logging.info("üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º: HOLD")
    
    def _log_recommendation(self, recommendation: dict):
        """Log recommendations with better formatting"""
        try:
            action_emoji = {
                'BUY': 'üü¢',
                'SELL': 'üî¥', 
                'HOLD': 'üü°'
            }
            
            emoji = action_emoji.get(recommendation['action'], '‚ö™')
            
            log_message = f"""
{emoji} ANALYSIS {self.symbol}:
Action: {recommendation['action']}
Confidence: {recommendation['confidence']:.2f}
Price: {recommendation['analysis']['current_price']:.2f}
RSI: {recommendation['analysis'].get('rsi', 'N/A'):.2f}
Reasoning: {recommendation['reasoning']}
"""
            logging.info(log_message)
            
        except Exception as e:
            logging.error(f"Error logging recommendation: {e}")
    
    def _execute_trade(self, recommendation: dict):
        """Execute trading operation"""
        try:
            if not self.trade_enabled:
                logging.info("üîí –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
                return
                
            if recommendation['action'] == 'BUY':
                # Buy logic
                result = self.mexc_client.create_order(
                    symbol=self.symbol,
                    side='BUY',
                    order_type='MARKET',
                    quantity=0.001  # Minimum quantity
                )
                logging.info(f"üü¢ BUY ORDER: {result}")
                
            elif recommendation['action'] == 'SELL':
                # Sell logic
                result = self.mexc_client.create_order(
                    symbol=self.symbol,
                    side='SELL', 
                    order_type='MARKET',
                    quantity=0.001
                )
                logging.info(f"üî¥ SELL ORDER: {result}")
                
        except Exception as e:
            logging.error(f"‚ùå Order execution error: {e}")

    def run_continuous(self):
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
        consecutive_errors = 0
        max_consecutive_errors = 5
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        
        while self.running:
            try:
                self.run_analysis_cycle()
                consecutive_errors = 0  # Reset error counter on success
                
                # Adaptive sleep based on system health
                sleep_time = 30
                if consecutive_errors > 0:
                    sleep_time = min(60, 30 * (consecutive_errors + 1))  # Increase sleep on errors
                
                # –ñ–¥–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ running
                for i in range(sleep_time):
                    if not self.running:
                        break
                    time.sleep(1)
                    
            except Exception as e:
                consecutive_errors += 1
                logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                
                if consecutive_errors >= max_consecutive_errors:
                    logging.error(f"üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫ ({max_consecutive_errors}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞")
                    self.running = False
                    break
                    
                if self.running:
                    error_sleep = min(60, 30 * consecutive_errors)
                    logging.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {error_sleep} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(error_sleep)
        
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_bot_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        return {
            'status': 'üü¢ RUNNING' if self.running else 'üî¥ STOPPED',
            'cycle_count': self.cycle_count,
            'symbol': self.symbol,
            'trade_enabled': self.trade_enabled
        }

def main():
    try:
        bot = TradingBot()
        logging.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        bot.run_continuous()
                
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        logging.info("üèÅ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()