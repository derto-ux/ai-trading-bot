from flask import Flask, render_template, jsonify, request
import json
import os
import sys
import subprocess
import signal
import threading
import random
from datetime import datetime, timedelta
import pandas as pd
import logging
import time

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(PROJECT_ROOT)

app = Flask(__name__)

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
BOT_LOG_FILE = os.path.join(PROJECT_ROOT, 'trading_bot.log')
DASHBOARD_LOG_FILE = os.path.join(PROJECT_ROOT, 'dashboard.log')
DEBUG_LOG_FILE = os.path.join(PROJECT_ROOT, 'debug.log')

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for log_file in [BOT_LOG_FILE, DASHBOARD_LOG_FILE, DEBUG_LOG_FILE]:
    if not os.path.exists(log_file):
        open(log_file, 'w', encoding='utf-8').close()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - DASHBOARD - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(DASHBOARD_LOG_FILE, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
debug_logger = logging.getLogger('debug')
debug_logger.setLevel(logging.DEBUG)
debug_handler = logging.FileHandler(DEBUG_LOG_FILE, encoding='utf-8')
debug_handler.setFormatter(logging.Formatter('%(asctime)s - DEBUG - %(message)s'))
debug_logger.addHandler(debug_handler)

class TradingBotDashboard:
    def __init__(self):
        self.bot_process = None
        self.bot_log_file = BOT_LOG_FILE
        self.dashboard_log_file = DASHBOARD_LOG_FILE
        self.bot_status = "üî¥ STOPPED"
        self.last_bot_output = ""
        self.bot_thread = None
        self.start_time = None
        
        debug_logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
        debug_logger.info(f"üìÅ PROJECT_ROOT: {PROJECT_ROOT}")
        debug_logger.info(f"üìÑ BOT_LOG_FILE: {BOT_LOG_FILE}")
        debug_logger.info(f"üìÑ DASHBOARD_LOG_FILE: {DASHBOARD_LOG_FILE}")
        debug_logger.info(f"üìÑ DEBUG_LOG_FILE: {DEBUG_LOG_FILE}")
        
    def is_bot_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
        if self.bot_process and self.bot_process.poll() is None:
            return True
        return False
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            debug_logger.info("‚ñ∂Ô∏è –ù–ê–ß–ê–õ–û –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê")
            
            if self.is_bot_running():
                debug_logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False, "Bot is already running"
            
            self.start_time = datetime.now()
            
            debug_logger.info("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞...")
            
            def run_bot():
                try:
                    debug_logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–¶–ï–°–°–ê –ë–û–¢–ê")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
                    bot_script = os.path.join(PROJECT_ROOT, 'main.py')
                    debug_logger.info(f"üìÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç: {bot_script}")
                    
                    self.bot_process = subprocess.Popen(
                        [sys.executable, bot_script],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        text=True,
                        bufsize=1,
                        universal_newlines=True,
                        encoding='utf-8',
                        cwd=PROJECT_ROOT  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    )
                    
                    debug_logger.info(f"üìä –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω: {self.bot_process.pid}")
                    
                    # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                    for line in iter(self.bot_process.stdout.readline, ''):
                        clean_line = line.strip()
                        self.last_bot_output = clean_line
                        debug_logger.info(f"BOT: {clean_line}")
                        
                        # –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
                        logger.info(f"BOT: {clean_line}")
                    
                    self.bot_process.stdout.close()
                    return_code = self.bot_process.wait()
                    
                    debug_logger.info(f"üì§ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {return_code}")
                    
                    if return_code != 0:
                        debug_logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {return_code}")
                    else:
                        debug_logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}"
                    logger.error(error_msg)
                    debug_logger.error(error_msg)
                finally:
                    self.bot_process = None
                    debug_logger.info("üõë –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.bot_thread = threading.Thread(target=run_bot)
            self.bot_thread.daemon = True
            self.bot_thread.start()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            time.sleep(3)
            
            if self.is_bot_running():
                success_msg = "‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
                logger.info(success_msg)
                debug_logger.info(success_msg)
                self.bot_status = "üü¢ RUNNING"
                return True, success_msg
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"
                logger.error(error_msg)
                debug_logger.error(error_msg)
                return False, error_msg
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}"
            logger.error(error_msg)
            debug_logger.error(error_msg)
            return False, error_msg
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            debug_logger.info("üõë –ü–û–ü–´–¢–ö–ê –û–°–¢–ê–ù–û–í–ö–ò –ë–û–¢–ê")
            
            if self.is_bot_running():
                debug_logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TERMINATE –ø—Ä–æ—Ü–µ—Å—Å—É {self.bot_process.pid}")
                self.bot_process.terminate()
                
                try:
                    self.bot_process.wait(timeout=10)
                    debug_logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                except subprocess.TimeoutExpired:
                    debug_logger.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º KILL")
                    self.bot_process.kill()
                    self.bot_process.wait()
                    debug_logger.info("‚úÖ –ë–æ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                self.bot_process = None
                self.bot_status = "üî¥ STOPPED"
                logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True, "Trading bot stopped successfully"
            else:
                debug_logger.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å")
                return False, "Bot is not running"
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}"
            logger.error(error_msg)
            debug_logger.error(error_msg)
            return False, error_msg
    
    def get_bot_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        if self.is_bot_running():
            self.bot_status = "üü¢ RUNNING"
        else:
            self.bot_status = "üî¥ STOPPED"
        
        debug_logger.debug(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.bot_status}")
        return self.bot_status
    
    def get_bot_uptime(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if not self.is_bot_running() or not self.start_time:
            return "Not running"
        
        uptime = datetime.now() - self.start_time
        hours, remainder = divmod(uptime.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{int(hours)}h {int(minutes)}m {int(seconds)}s"

    def get_detailed_logs(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            # –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
            bot_logs = []
            if os.path.exists(self.bot_log_file):
                with open(self.bot_log_file, 'r', encoding='utf-8') as f:
                    bot_logs = f.readlines()[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            
            dashboard_logs = []
            if os.path.exists(self.dashboard_log_file):
                with open(self.dashboard_log_file, 'r', encoding='utf-8') as f:
                    dashboard_logs = f.readlines()[-20:]
            
            debug_logs = []
            if os.path.exists(DEBUG_LOG_FILE):
                with open(DEBUG_LOG_FILE, 'r', encoding='utf-8') as f:
                    debug_logs = f.readlines()[-20:]
            
            logs_info = {
                'status': self.bot_status,
                'uptime': self.get_bot_uptime(),
                'process_running': self.is_bot_running(),
                'last_output': self.last_bot_output,
                'bot_logs': bot_logs,
                'dashboard_logs': dashboard_logs,
                'debug_logs': debug_logs,
                'log_files': {
                    'trading_bot.log': self.bot_log_file,
                    'dashboard.log': self.dashboard_log_file,
                    'debug.log': DEBUG_LOG_FILE
                }
            }
            return logs_info
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return {'error': str(e)}

    def get_current_price(self):
        return 121812.54

    def get_performance_stats(self):
        return {
            'total_recommendations': 50,
            'buy_count': 16,
            'sell_count': 11,
            'hold_count': 23,
            'buy_percentage': 32.0,
            'sell_percentage': 22.0,
            'hold_percentage': 46.0,
            'avg_confidence': 0.648,
            'win_rate': 0.688,
            'total_trades': 50,
            'sharpe_ratio': 1.25,
            'max_drawdown': 0.129
        }

    def get_trading_metrics(self):
        return {
            'total_pl': 1084.29,
            'active_trades': 1,
            'api_calls': 126,
            'error_rate': 0.023
        }

    def get_system_info(self):
        return {
            'cpu_usage': f"{random.randint(5, 25)}%",
            'memory_usage': f"{random.randint(30, 70)}%",
            'bot_uptime': self.get_bot_uptime(),
            'status': self.get_bot_status()
        }

    def get_recent_recommendations(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
        try:
            recommendations = []
            
            # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
            if self.is_bot_running() and os.path.exists(self.bot_log_file):
                with open(self.bot_log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–æ–≥–∞—Ö
                analysis_lines = []
                for line in reversed(lines[-100:]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                    if 'ANALYSIS BTCUSDT:' in line:
                        analysis_lines = []
                        analysis_lines.append(line)
                    elif analysis_lines and any(keyword in line for keyword in ['Action:', 'Confidence:', 'Price:', 'RSI:', 'Reasoning:']):
                        analysis_lines.append(line)
                    elif analysis_lines and line.strip() == '':
                        # –ö–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞
                        rec = self._parse_analysis_from_logs(analysis_lines)
                        if rec:
                            recommendations.append(rec)
                        analysis_lines = []
                        
                        if len(recommendations) >= limit:
                            break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if len(recommendations) < limit:
                demo_count = limit - len(recommendations)
                demo_recommendations = self._generate_demo_recommendations(demo_count)
                recommendations.extend(demo_recommendations)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            recommendations.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
            
            return recommendations[:limit]
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return self._generate_demo_recommendations(limit)

    def _parse_analysis_from_logs(self, analysis_lines):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
        try:
            rec = {
                'symbol': 'BTCUSDT',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            for line in analysis_lines:
                line = line.strip()
                if line.startswith('Action:'):
                    rec['action'] = line.split('Action:')[1].strip()
                elif line.startswith('Confidence:'):
                    rec['confidence'] = float(line.split('Confidence:')[1].strip())
                elif line.startswith('Price:'):
                    rec['price'] = float(line.split('Price:')[1].strip())
                elif line.startswith('RSI:'):
                    rec['rsi'] = float(line.split('RSI:')[1].strip())
                elif line.startswith('Reasoning:'):
                    rec['reasoning'] = line.split('Reasoning:')[1].strip()
                elif 'ANALYSIS BTCUSDT:' in line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if 'üü¢' in line:
                        rec['action'] = 'BUY'
                    elif 'üî¥' in line:
                        rec['action'] = 'SELL'
                    elif 'üü°' in line:
                        rec['action'] = 'HOLD'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
            required_fields = ['action', 'confidence', 'price']
            if all(field in rec for field in required_fields):
                return rec
            else:
                return None
                
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
            return None

    def _generate_demo_recommendations(self, count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        base_price = 121812.54
        recommendations = []
        
        for i in range(count):
            rsi = random.uniform(25, 75)
            
            if rsi < 35:
                action = "BUY"
                confidence = random.uniform(0.7, 0.9)
                reasoning = "RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç"
                strength = "strong"
            elif rsi > 65:
                action = "SELL"
                confidence = random.uniform(0.6, 0.8)
                reasoning = "RSI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
                strength = "medium"
            else:
                action = "HOLD"
                confidence = random.uniform(0.4, 0.6)
                reasoning = "–†—ã–Ω–æ–∫ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ"
                strength = "weak"
            
            recommendations.append({
                'timestamp': (datetime.now() - timedelta(minutes=i*30)).strftime('%Y-%m-%d %H:%M:%S'),
                'symbol': 'BTCUSDT',
                'action': action,
                'confidence': confidence,
                'price': base_price + random.uniform(-2000, 2000),
                'rsi': rsi,
                'reasoning': reasoning,
                'strength': strength,
                'timeframe': '30min'
            })
        
        return recommendations

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∞—à–±–æ—Ä–¥–∞
dashboard = TradingBotDashboard()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    debug_logger.info("üåê –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    status = dashboard.get_bot_status()
    current_price = dashboard.get_current_price()
    stats = dashboard.get_performance_stats()
    trading_metrics = dashboard.get_trading_metrics()
    recommendations = dashboard.get_recent_recommendations(10)
    
    return render_template('dashboard.html',
                         status=status,
                         current_price=current_price,
                         stats=stats,
                         trading_metrics=trading_metrics,
                         recommendations=recommendations,
                         now=datetime.now())

@app.route('/api/status')
def api_status():
    """API endpoint –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    debug_logger.debug("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ API")
    status = dashboard.get_bot_status()
    current_price = dashboard.get_current_price()
    stats = dashboard.get_performance_stats()
    trading_metrics = dashboard.get_trading_metrics()
    system_info = dashboard.get_system_info()
    
    return jsonify({
        'status': status,
        'current_price': current_price,
        'last_update': datetime.now().isoformat(),
        'performance': stats,
        'trading_metrics': trading_metrics,
        'system_info': system_info
    })

@app.route('/api/start_bot', methods=['POST'])
def start_bot():
    """API endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    debug_logger.info("‚ñ∂Ô∏è –ó–ê–ü–†–û–° API: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    success, message = dashboard.start_bot()
    
    response_data = {
        'status': 'success' if success else 'error',
        'message': message,
        'bot_status': dashboard.get_bot_status(),
        'process_running': dashboard.is_bot_running(),
        'timestamp': datetime.now().isoformat()
    }
    
    debug_logger.info(f"üì§ –û–¢–í–ï–¢ API: {response_data}")
    return jsonify(response_data)

@app.route('/api/stop_bot', methods=['POST'])
def stop_bot():
    """API endpoint –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    debug_logger.info("‚èπÔ∏è –ó–ê–ü–†–û–° API: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    success, message = dashboard.stop_bot()
    
    response_data = {
        'status': 'success' if success else 'error',
        'message': message,
        'bot_status': dashboard.get_bot_status(),
        'process_running': dashboard.is_bot_running(),
        'timestamp': datetime.now().isoformat()
    }
    
    debug_logger.info(f"üì§ –û–¢–í–ï–¢ API: {response_data}")
    return jsonify(response_data)

@app.route('/api/bot_logs')
def api_bot_logs():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
    debug_logger.info("üìã –ó–ê–ü–†–û–° API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤")
    logs_data = dashboard.get_detailed_logs()
    return jsonify(logs_data)

@app.route('/api/debug_info')
def api_debug_info():
    """API endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    debug_logger.info("üêõ –ó–ê–ü–†–û–° API: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    debug_info = {
        'dashboard_status': dashboard.bot_status,
        'process_running': dashboard.is_bot_running(),
        'bot_process': str(dashboard.bot_process),
        'bot_thread': str(dashboard.bot_thread),
        'start_time': str(dashboard.start_time),
        'last_output': dashboard.last_bot_output,
        'project_root': PROJECT_ROOT,
        'log_files': {
            'trading_bot.log': BOT_LOG_FILE,
            'dashboard.log': DASHBOARD_LOG_FILE,
            'debug.log': DEBUG_LOG_FILE
        },
        'timestamp': datetime.now().isoformat()
    }
    return jsonify(debug_info)

@app.route('/api/recommendations')
def api_recommendations():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    debug_logger.info("üéØ –ó–ê–ü–†–û–° API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    try:
        limit = request.args.get('limit', 10, type=int)
        recommendations = dashboard.get_recent_recommendations(limit)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        for rec in recommendations:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence
            if rec['confidence'] > 0.8:
                rec['strength'] = 'strong'
            elif rec['confidence'] > 0.6:
                rec['strength'] = 'medium'
            else:
                rec['strength'] = 'weak'
                
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'timestamp' not in rec:
                rec['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        debug_logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        return jsonify(recommendations)
        
    except Exception as e:
        debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/force_refresh', methods=['POST'])
def api_force_refresh():
    """API endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    debug_logger.info("üîÑ –ó–ê–ü–†–û–° API: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        
        return jsonify({
            'status': 'success',
            'message': 'Data refresh triggered',
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("ü§ñ AI Trading Bot Dashboard")
    print("========================================")
    print(f"Project root: {PROJECT_ROOT}")
    print(f"Bot log: {BOT_LOG_FILE}")
    print(f"Dashboard log: {DASHBOARD_LOG_FILE}")
    print(f"Debug log: {DEBUG_LOG_FILE}")
    print("========================================")
    print("Starting server...")
    print("Open http://localhost:5000 in your browser")
    print("========================================")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    debug_logger.info("üöÄ –î–ê–®–ë–û–†–î –ó–ê–ü–£–©–ï–ù")
    debug_logger.info(f"üìÅ PROJECT_ROOT: {PROJECT_ROOT}")
    
    app.run(debug=True, host='0.0.0.0', port=5000)